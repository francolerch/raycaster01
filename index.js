// Generated by Haxe 4.0.0-rc.2+77068e10c
(function () { "use strict";
class Boot {
	static main() {
		var centerElement = window.document.getElementById("canvas");
		var canvas = window.document.createElement("canvas");
		centerElement.appendChild(canvas);
		window.addEventListener("keydown",function(event) {
			if(event.code == "KeyR") {
				window.location.reload();
			}
		});
		canvas.height = 600;
		canvas.width = 600;
		if(canvas.getContext != null) {
			Boot.inst = new Main(canvas);
			window.onload = ($_=Boot.inst,$bind($_,$_.drawLoop));
		}
	}
}
class Box {
	constructor(a,size,rotation) {
		this.a = a;
		this.size = size;
		this.rotation = rotation;
		this.walls = [];
		this.corners = [];
		this.corners.push({ x : this.a.x, y : this.a.y});
		this.corners.push({ x : this.a.x + size, y : this.a.y});
		this.corners.push({ x : this.a.x + size, y : this.a.y + size});
		this.corners.push({ x : this.a.x, y : this.a.y + size});
		var _g = 0;
		var _g1 = this.corners.length;
		while(_g < _g1) {
			var i = _g++;
			this.corners[i] = this.calculateRotation(this.corners[i]);
		}
		this.walls.push(new Wall(this.corners[0],this.corners[1]));
		this.walls.push(new Wall(this.corners[1],this.corners[2]));
		this.walls.push(new Wall(this.corners[2],this.corners[3]));
		this.walls.push(new Wall(this.corners[3],this.corners[0]));
	}
	calculateRotation(a) {
		return this.rotate(this.a.x + this.size / 2,this.a.y + this.size / 2,a.x,a.y,this.rotation);
	}
	rotate(cx,cy,x,y,angle) {
		var radians = Math.PI / 180 * angle;
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		var nx = cos * (x - cx) + sin * (y - cy) + cx;
		var ny = cos * (y - cy) - sin * (x - cx) + cy;
		return { x : nx, y : ny};
	}
}
class Helpers {
	static getDist(a,b) {
		var c1 = a.x - b.x;
		var c2 = a.y - b.y;
		return Math.sqrt(c1 * c1 + c2 * c2);
	}
}
class Main {
	constructor(canvas) {
		this.updateCanvas = true;
		this.canvas = canvas;
		Main.ctx = canvas.getContext("2d");
		this.canvas.onmousemove = $bind(this,this.onMouseMove);
		Main.boxes = [];
		this.walls = [];
		Main.boxes.push(new Box({ x : 0, y : 0},canvas.width,0));
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			var pos = { x : Math.random() * canvas.width, y : Math.random() * canvas.height};
			Main.boxes.push(new Box(pos,60,Math.random() * 360));
		}
		var _g1 = 0;
		var _g2 = Main.boxes;
		while(_g1 < _g2.length) {
			var b = _g2[_g1];
			++_g1;
			var _g11 = 0;
			var _g21 = b.walls;
			while(_g11 < _g21.length) {
				var w = _g21[_g11];
				++_g11;
				this.walls.push(w);
			}
		}
		this.particle = new Particle(Main.boxes,this.walls);
	}
	drawLoop(dt) {
		window.requestAnimationFrame($bind(this,this.drawLoop));
		if(this.updateCanvas) {
			this.update(dt);
			this.updateCanvas = false;
		}
	}
	update(dt) {
		Main.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
		var _g = 0;
		var _g1 = this.walls;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.draw();
		}
		this.particle.update(this.walls);
	}
	onMouseMove(event) {
		Main.mouse = { x : event.layerX, y : event.layerY};
		this.updateCanvas = true;
	}
}
class Particle {
	constructor(boxes,walls) {
		this.a = { x : 0, y : 0};
		this.walls = [];
		this.rays = [];
		var _g = 0;
		while(_g < boxes.length) {
			var b = boxes[_g];
			++_g;
			var _g1 = 0;
			var _g11 = b.walls;
			while(_g1 < _g11.length) {
				var w = _g11[_g1];
				++_g1;
				this.walls.push(w);
			}
			var _g2 = 0;
			var _g3 = b.corners;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				this.rays.push(new Ray(this.a,c));
			}
		}
	}
	update(walls) {
		this.updatePos();
		this.rays = this.removeDuplicates(this.rays);
		var _g = 0;
		var _g1 = this.rays;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			r.update(this.a);
			r.castTo(walls);
		}
	}
	updatePos() {
		this.a = Main.mouse;
	}
	removeDuplicates(array) {
		var i = 0;
		return array.filter(function(e) {
			var index = array.indexOf(e);
			var arrayToReturn = array[index].angle == array[i].angle;
			i += 1;
			return arrayToReturn;
		});
	}
}
class Ray {
	constructor(a,b) {
		this.a = a;
		this.b = b;
		this.angle = this.getAngle();
		this.to = this.calculateTo();
	}
	update(a) {
		this.a = a;
		this.angle = this.getAngle();
		this.to = this.calculateTo();
	}
	calculateTo() {
		return { x : Math.cos(this.angle), y : Math.sin(this.angle)};
	}
	getAngle() {
		return Math.atan2(this.a.y - this.b.y,this.a.x - this.b.x);
	}
	castTo(walls) {
		var record = 100000000;
		var closest = null;
		var _g = 0;
		while(_g < walls.length) {
			var w = walls[_g];
			++_g;
			var pt = this.getClosestIntersection(w);
			if(pt != null) {
				var dist = Helpers.getDist(this.a,pt);
				if(dist < record) {
					record = dist;
					closest = pt;
				}
			}
		}
		if(closest != null) {
			this.draw(closest);
		}
	}
	getClosestIntersection(wall) {
		var x1 = wall.a.x;
		var y1 = wall.a.y;
		var x2 = wall.b.x;
		var y2 = wall.b.y;
		var x3 = this.a.x;
		var y3 = this.a.y;
		var x4 = this.a.x + this.to.x;
		var y4 = this.a.y + this.to.y;
		var den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
		if(den == 0) {
			return null;
		}
		var t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;
		var u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den;
		if(t >= -0.01 && t <= 1.01 && u < 0) {
			return { x : x1 + t * (x2 - x1), y : y1 + t * (y2 - y1)};
		}
		return null;
	}
	draw(closest) {
		this.drawRay(closest);
		this.drawHit(closest);
	}
	drawRay(closest) {
		Main.ctx.strokeStyle = "#f55";
		Main.ctx.lineWidth = 1;
		Main.ctx.beginPath();
		Main.ctx.moveTo(this.a.x,this.a.y);
		Main.ctx.lineTo(closest.x,closest.y);
		Main.ctx.closePath();
		Main.ctx.stroke();
	}
	drawHit(closest) {
		Main.ctx.fillStyle = "#FF0000";
		Main.ctx.beginPath();
		Main.ctx.arc(closest.x,closest.y,5,0,360,false);
		Main.ctx.closePath();
		Main.ctx.fill();
	}
}
class Wall {
	constructor(a,b) {
		this.a = { x : a.x, y : a.y};
		this.b = { x : b.x, y : b.y};
	}
	draw() {
		var ctx = Main.ctx;
		ctx.strokeStyle = "#000000";
		ctx.lineWidth = 2;
		ctx.beginPath();
		ctx.moveTo(this.a.x,this.a.y);
		ctx.lineTo(this.b.x,this.b.y);
		ctx.closePath();
		ctx.stroke();
	}
}
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
Main.mouse = { x : 0, y : 0};
Boot.main();
})();

//# sourceMappingURL=index.js.map